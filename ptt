#!/bin/bash

# Utility shell script for tracking time spent on different tasks of a project
# Output is directed to a markdownfile that can be put in the project's git 
# repository
# by Tor Nilsson Ohrn in 2013

TIMELOG_FILENAME="TIMELOG.md"
TEMPFILE_FILENAME=".timestamp"

USAGE_MSG="the project time tracker needs to be run as: ptt [init/start/paus/stop/log] in the root folder of your project"
NOT_INITIATED_MSG="fatal: not a ptt project folder"

# if wrong arguments tell the user how to use the program
# if [ -z "$1" ]; then
# 	echo $USAGE_MSG
# 	exit 1
# fi

# look for ptt files in parent folders recursively until TIMELOG.md is found
function find_ptt() {
	local current_folder="$1"

	local gone_too_far=$(echo $current_folder | grep '\/' | wc -l)
	if [ $gone_too_far -le 0 ]; then
		return 1
	else 
		local found=$(ls $current_folder | grep $TIMELOG_FILENAME | wc -l)
		if [ $found -ne 0 ]; then
			ROOT=$current_folder 
			return 0
		else 
			find_ptt $(echo $current_folder | sed 's/\/[^\/]*$//')
		fi
	fi
}


# find a parent directory that has an initiated timelog file
if ! find_ptt $(pwd); then
	if [ $1 == "init" ]; then
		ROOT=$(pwd)
	elif [ $1 == "start" ] || [ $1 == "stop" ] || [ $1 == "paus" ] || [ $1 == "log" ]; then
		echo $NOT_INITIATED_MSG
		exit 1
	else 
		echo $USAGE_MSG
		exit 0
	fi
fi

LOGFILE=$(echo $ROOT | sed 's/$/\/'$TIMELOG_FILENAME'/')
TEMPFILE=$(echo $ROOT | sed 's/$/\/'$TEMPFILE_FILENAME'/')
REPOSITORY_NAME=$(echo $ROOT | sed 's/.*\///')

# Messages to user that is dependent on paths
NO_TEMPFILE_MSG="no timetracking start point can be found in $TEMPFILE"
EXISTING_TEMPFILE_MSG="already existing timetracking log for $REPOSITORY_NAME"
EXISTING_LOGFILE_MSG="project timetracker already initated for $REPOSITORY_NAME"
INITIATED_TIMETRACKER_MSG="initiated the project time tracker for project $REPOSITORY_NAME"

# always start by defining the paths of the ptt files for the current repository 


# see if the timetracking is paused
function is_paused() {
	# see if the paused flag is in the tempfile
	local isPaused=$(grep 'paused' $TEMPFILE | wc -l)
	[ $isPaused -ne 0 ] && return 0 || return 1
}

# get how much time has elapsed from the tempfile
function get_elapsed() {
	# find the elapsed seconds in the tempfile
	local elapsed=$(grep 'elapsed:[0-9]\{1,12\}$' $TEMPFILE | sed -e s/elapsed://)
	echo $elapsed
}

# get the time of the last started timetracking session
function get_start() {
	# find the UTC timestamp in the tempfile
	local start=$(grep 'start:[0-9]\{10,12\}$' $TEMPFILE | sed -e s/start://)
	echo $start
}

# get the resulting logfile line that shows the total time spent in hours and minutes
function get_total() {
 total_hrs=`grep -o '[0-9]\{1,3\}.hrs' $LOGFILE | sed -e s/.hrs// | awk '{hrs+=$1} END {printf hrs}'`
 total_min=`grep -o '[0-9]\{1,2\}.min' $LOGFILE | sed -e s/.min// | awk '{min+=$1} END {printf min}'`

 total_hrs=$(($total_hrs + $total_min / 60))
 total_min=$(($total_min % 60))
 echo $total_hrs" hours and "$total_min" minutes "
}


# start time tracking if already running task is not detected in tempfile
if [ "$1" == "start" ]; then

	if [ ! -e $LOGFILE ]; then
		echo $NOT_INITIATED_MSG

	# continue existing timetracking session
	elif [ -e $TEMPFILE ]; then

		# continue if paused
		if ( is_paused ) then

			NEWSTART=$(date +%s)

			# remove paused variable in tempfile and add a new start time
			sed -i 's/paused//' $TEMPFILE
			echo "start:"$NEWSTART >> $TEMPFILE
			echo "continuing timetracking ..."

		# do nothing if already running
		else 
			echo $REPOSITORY_NAME" timetracking already running"
		fi
	# start new timetracking session
	else 

		START=$(date +%s)

		echo "start:"$START > $TEMPFILE
		echo "elapsed:0" >> $TEMPFILE

		echo $REPOSITORY_NAME" timelogger started!"
	fi

# temporarily paus a running timetracking session 
elif [ "$1" == "paus" ]; then
	if [ -e $TEMPFILE  ]; then
		if ( is_paused ) then
			echo $REPOSITORY_NAME" timetracking already paused"
		else 
			ELAPSED=$(get_elapsed)
			START=$(get_start)
			PAUS=$(date +%s)
			NEWTOTAL=$(expr $PAUS - $START + $ELAPSED)
			# save the so far elapsed time in the tempfile
			echo "elapsed:"$NEWTOTAL > $TEMPFILE
			echo "paused" >> $TEMPFILE
			echo "timetracking paused"
		fi
	else 
		echo $NO_TEMPFILE_MSG
	fi

# stop timetracking and add it to log.md
elif [ "$1" == "stop" ]; then

	if [ ! -e $LOGFILE ]; then
		echo $NOT_INITIATED_MSG
	elif [ ! -e $TEMPFILE ]; then
		echo $NO_TEMPFILE_MSG
	else 

		read -e -p $'what did you work with?\n' TASK

		STOP=$(date +%s)

		# remove any old total time spent line from the logfile
		sed -i '/^###.Total time spent:.*$/d' $LOGFILE
		# ... and unnecessary new lines ?
		sed -i '/^$/d' $LOGFILE

		if ( is_paused ) then
			START=$STOP
		else 
			START=$(get_start)
		fi

		ELAPSED=$(get_elapsed)
		
		DAY=$(date +%F)
		TOTAL=$(( $STOP - $START + $ELAPSED))
		HOURS=$(( $TOTAL / 3600 ))
		MINUTES=$(expr \( $TOTAL - \( $HOURS \* 3600 \) \) / 60  )

	 	LOGTEXT=$DAY" "$TASK" "$HOURS" hrs "$MINUTES" min"
		printf "* $LOGTEXT" >> $LOGFILE
		echo "saved to logfile:"
		echo $LOGTEXT


		# update the total time spent post in the log file
		printf "\n\n### Total time spent: $(get_total)" >> $LOGFILE
		# remove tempfile
		rm $TEMPFILE
	fi

# show the logfile of the current timetracking session
elif [ "$1" == "log" ]; then
	if [ ! -e $TEMPFILE ]; then
		echo $NO_TEMPFILE_MSG
	else 
		cat $TEMPFILE
	fi

# initiate a project time tracker for the current working directory
elif [ "$1" == "init" ]; then
		printf "## Timelog for $REPOSITORY_NAME\n\n" > $LOGFILE
		echo $INITIATED_TIMETRACKER_MSG

else 
	echo $USAGE_MSG

fi